import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from PIL import Image

# ‚úÖ Primeira chamada obrigat√≥ria
st.set_page_config(page_title="An√°lise de Intervalos de Confian√ßa", layout="centered")

# üé® Estilo lavanda profunda embutido
st.markdown("""
<style>
    header {visibility: hidden;}
    .viewerBadge_container__1QSob {visibility: hidden;}
    .main .block-container {
        padding-top: 2rem;
        background-color: white;  /* Garante fundo branco para o container */
        border: none;  /* Remove qualquer borda indesejada */
    }
    body, .main, .block-container {
        background-color: white !important;  /* Garante que o fundo ser√° branco */
        color: #3e3553;
        font-family: 'Segoe UI', sans-serif;
        margin: 0;  /* Remove margens indesejadas */
    }
    section[data-testid="stSidebar"] {
        background-color: #5e4b8b !important;
        color: white !important;
    }
    section[data-testid="stSidebar"] * {
        color: white !important;
    }
    h1, h2, h3, h4 {
        color: #4a3d6a;
    }
    .stSelectbox > div > div {
        background-color: white !important;
        color: #5e4b8b !important;
    }
    .lavender-box {
        background-color: #ede6fa;
        border-left: 6px solid #b89fe6;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 25px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    }
    .banner {
        background-color: #5e4b8b;
        color: white;
        padding: 1.5rem;
        text-align: center;
        font-size: 1.5rem;
        font-weight: 600;
        border-radius: 10px;
        margin-bottom: 40px;
        letter-spacing: 0.5px;
    }
    .footer {
        font-size: 0.9rem;
        color: #777;
        text-align: center;
        margin-top: 40px;
    }
</style>
""", unsafe_allow_html=True)

# üåü T√≠tulo da P√°gina
st.title("üîç Intervalos de Confian√ßa por Categoria de Esta√ß√£o")
st.markdown("Aplica√ß√£o de Intervalos de Confian√ßa, visualiza√ß√µes e interpreta√ß√µes pr√°ticas com base nos dados de metais pesados.")

# --- Carregar os dados ---
@st.cache_data
def load_data():
    df = pd.read_excel("dados_metais_com_categoria.xlsx")
    df.columns = df.columns.str.strip().str.upper()
    return df

df = load_data()

# --- Visualiza√ß√£o do dataset ---
st.markdown('<div class="lavender-box">', unsafe_allow_html=True)
st.subheader("üßæ Dados Carregados")
st.markdown("Abaixo est√£o as amostras de concentra√ß√£o de metais pesados por esta√ß√£o de coleta:")
st.dataframe(df, use_container_width=True)
st.markdown('</div>', unsafe_allow_html=True)

# --- Explica√ß√£o das colunas ---
st.markdown('<div class="lavender-box">', unsafe_allow_html=True)
st.subheader("üìò Dicion√°rio das Colunas do Dataset")
st.markdown("""
- **ESTA√á√ÉO**: C√≥digo da esta√ß√£o de coleta da amostra de √°gua (ex: RD009, RD085...).
- **CATEGORIA**: Classifica√ß√£o da esta√ß√£o com base na proximidade ao evento de contamina√ß√£o:
  - `INCIDENTE`: diretamente afetadas;
  - `M√âDIOS`: pr√≥ximas ao incidente;
  - `LONGES`: regi√µes mais afastadas.
- **DATA**: Data da coleta da amostra.
- **ARS√äNIO TOTAL**: Concentra√ß√£o total de ars√™nio presente na √°gua (Œºg/L).
- **FERRO DISSOLVIDO**: Concentra√ß√£o de ferro dissolvido na amostra (Œºg/L).
- **MANGAN√äS TOTAL**: Concentra√ß√£o total de mangan√™s na √°gua (Œºg/L).
""")
st.markdown('</div>', unsafe_allow_html=True)

# --- Define os grupos ---
grupos = {
    "INCIDENTE": ["RD009", "RD075", "RD074", "RD059"],
    "LONGES": ["RD095", "RD085"],
    "MEDIOS": ["RD083", "RD039"]
}

# --- Escolha da m√©trica num√©rica para an√°lise ---
colunas_numericas = df.select_dtypes(include=np.number).columns.tolist()
coluna_selecionada = st.selectbox("Selecione o tipo de metal para an√°lise:", colunas_numericas)

# --- Fun√ß√£o para c√°lculo de intervalo de confian√ßa ---
def calcular_ic(dados, alpha=0.05):
    n = len(dados)
    media = np.mean(dados)
    erro_padrao = stats.sem(dados, nan_policy='omit')
    margem_erro = stats.t.ppf(1 - alpha/2, df=n-1) * erro_padrao
    return media, media - margem_erro, media + margem_erro

# --- An√°lise por grupo ---
for grupo_nome, regioes in grupos.items():
    st.subheader(f"üìä Categoria: {grupo_nome}")
    
    grupo_df = df[df["ESTA√á√ÉO"].isin(regioes)]

    if grupo_df.empty:
        st.warning(f"Nenhum dado encontrado para a categoria {grupo_nome}.")
        continue

    # üîπ C√°lculo do IC para a categoria inteira (todas as esta√ß√µes juntas)
    valores_categoria = grupo_df[coluna_selecionada].dropna()

    if not valores_categoria.empty:
        media_cat, ic_min_cat, ic_max_cat = calcular_ic(valores_categoria)
        
        st.markdown(f"**Resumo da Categoria `{grupo_nome}`**")
        st.write(f"M√©dia geral: `{media_cat:.2f}`, IC 95%: [`{ic_min_cat:.2f}`, `{ic_max_cat:.2f}`]")

        fig_cat, ax_cat = plt.subplots()
        sns.histplot(valores_categoria, kde=True, ax=ax_cat, color='mediumpurple')
        ax_cat.axvline(ic_min_cat, color='red', linestyle='--', label='IC Min')
        ax_cat.axvline(ic_max_cat, color='red', linestyle='--', label='IC Max')
        ax_cat.axvline(media_cat, color='green', linestyle='-', label='M√©dia')
        ax_cat.set_title(f'Distribui√ß√£o Geral - {grupo_nome}')
        ax_cat.legend()
        st.pyplot(fig_cat)

        st.success(
            f"Para a categoria **{grupo_nome}**, o intervalo de confian√ßa de 95% da m√©dia de `{coluna_selecionada}` "
            f"est√° entre **{ic_min_cat:.2f}** e **{ic_max_cat:.2f}**."
        )

    # üîé An√°lise por esta√ß√£o individual
    for estacao in regioes:
        estacao_df = grupo_df[grupo_df["ESTA√á√ÉO"] == estacao]
        valores = estacao_df[coluna_selecionada].dropna()

        if valores.empty:
            st.warning(f"Sem dados v√°lidos para {estacao} na m√©trica selecionada.")
            continue

        media, ic_min, ic_max = calcular_ic(valores)

        st.markdown(f"**Esta√ß√£o `{estacao}`**")
        st.write(f"M√©dia: `{media:.2f}`, IC 95%: [`{ic_min:.2f}`, `{ic_max:.2f}`]")

        fig, ax = plt.subplots()
        sns.histplot(valores, kde=True, ax=ax, color='skyblue')
        ax.axvline(ic_min, color='red', linestyle='--', label='IC Min')
        ax.axvline(ic_max, color='red', linestyle='--', label='IC Max')
        ax.axvline(media, color='green', linestyle='-', label='M√©dia')
        ax.set_title(f'Distribui√ß√£o - {estacao}')
        ax.legend()
        st.pyplot(fig)

        st.info(
            f"O intervalo de confian√ßa indica que h√° 95% de confian√ßa de que a m√©dia real de `{coluna_selecionada}` na esta√ß√£o **{estacao}** "
            f"esteja entre **{ic_min:.2f}** e **{ic_max:.2f}** com base na amostra."
        )
